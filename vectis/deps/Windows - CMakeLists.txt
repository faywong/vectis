# Boilerplate.
cmake_minimum_required (VERSION 3.1)   # First version with CMAKE_CXX_STANDARD.
project (skimake)
set (CMAKE_CXX_STANDARD 11)

# Default to Release mode.  We're mainly targeting Skia users, not Skia developers.
if (NOT CMAKE_BUILD_TYPE)
    set (CMAKE_BUILD_TYPE Release)
endif ()

# To first approximation, the Skia library comprises all .cpp files under src/.
file (GLOB_RECURSE srcs ../src/*.cpp)

function (find_include_dirs out)
    file (GLOB_RECURSE headers ${ARGN})
    foreach (path ${headers})
        get_filename_component (dir ${path} PATH)
        list (APPEND include_dirs ${dir})
    endforeach()
    list (REMOVE_DUPLICATES include_dirs)
    set (${out} ${include_dirs} PARENT_SCOPE)
endfunction()

# We need src/ directories and include/private on our path when building Skia.
# Users should be able to use Skia with only include/ directories that are not include/private.
find_include_dirs(private_includes ../src/*.h ../include/private/*.h)
find_include_dirs(public_includes ../include/*.h)
list (REMOVE_ITEM public_includes ${private_includes})  # Easiest way to exclude private.

# These guys are third_party but provided by a Skia checkout.
list (APPEND srcs             ../third_party/etc1/etc1.cpp ../third_party/ktx/ktx.cpp)
list (APPEND private_includes ../third_party/etc1          ../third_party/ktx)

function (remove_srcs)
    file (GLOB_RECURSE to_remove ${ARGN})
    list (REMOVE_ITEM srcs ${to_remove})
    set (srcs ${srcs} PARENT_SCOPE)
endfunction()

# This file is empty and is only used to trick GYP.
remove_srcs (../src/core/SkForceCPlusPlusLinking.cpp)
# This file forces linking for all our supported image decoders.  We're more fine-grained.
remove_srcs (../src/images/SkForceLinking.cpp)
# Chrome only?
remove_srcs (../src/ports/SkFontHost_fontconfig.cpp
             ../src/fonts/SkFontMgr_fontconfig.cpp
             ../src/ports/SkFontConfigInterface_direct.cpp)
# Alternative font managers.
remove_srcs (../src/ports/SkFontMgr_custom*.cpp)
# Not actually used by Skia.
remove_srcs (../src/utils/SkThreadUtils_pthread_*.cpp)

# Skia sure ships a lot of code no one uses.
remove_srcs (../src/animator/* ../src/*nacl* ../src/svg/* ../src/views/* ../src/xml/*)

# Some files only contain code in Debug mode.  This quiets down some linker warnings.
if (NOT CMAKE_BUILD_TYPE EQUAL Debug AND NOT WIN32)
    remove_srcs (../src/core/SkDebug.cpp ../src/utils/SkDumpCanvas.cpp)
endif()

# Remove OS-specific source files.
if (NOT WIN32)
    remove_srcs(../src/*XPS*
                ../src/*_win*.cpp
                ../src/gpu/gl/angle/*
                ../src/ports/SkImageDecoder_WIC.cpp
                ../src/utils/win/*)
endif()
if (WIN32)    
    remove_srcs(../src/ports/SkOSFile_posix.cpp
                ../src/ports/SkTime_Unix.cpp
                ../src/ports/SkDebug_stdio.cpp
                ../src/ports/SkTLS_pthread.cpp
                ../src/utils/SkThreadUtils_pthread.cpp
                ../src/utils/SkThreadUtils_pthread_other.cpp
                ../src/doc/SkDocument_XPS_None.cpp)
    if(SKIA_GDI) # If SKIA_GDI (Experimental) is defined, use it, otherwise DirectWrite
        remove_srcs(../src/ports/SkFontMgr_win_dw_factory.cpp)
    else()
        remove_srcs(../src/ports/SkFontMgr_win_gdi_factory.cpp)
    endif()
endif()
if (APPLE OR NOT UNIX)
    remove_srcs(../src/gpu/gl/glx/*
                ../src/images/SkImageDecoder_FactoryDefault.cpp
                ../src/ports/SkFontMgr_fontconfig*.cpp
                ../src/*FreeType*)
endif()
if (NOT ANDROID)
    remove_srcs(../src/*Hwui* ../src/*android*)
endif()
if (NOT APPLE)
    remove_srcs(../src/*darwin*
                ../src/ports/SkImageDecoder_CG.cpp
                ../src/utils/mac/*
                ../src/*mac*)
endif()

# Remove processor-specific source files.
if (NOT CMAKE_SYSTEM_PROCESSOR EQUAL ARM)
    remove_srcs(../src/*arm* ../src/*ARM* ../src/*neon* ../src/*NEON*)
endif()
if (NOT CMAKE_SYSTEM_PROCESSOR EQUAL MIPS)
    remove_srcs(../src/*mips* ../src/*MIPS*)
endif()

# Make our ports choices.
remove_srcs(
    ../src/*moz*   # We're probably not Mozilla.
    ../src/gpu/GrContextFactory.cpp                  # For internal testing only.
    ../src/gpu/gl/GrGLCreateNativeInterface_none.cpp
    ../src/gpu/gl/GrGLDefaultInterface_none.cpp
    ../src/gpu/gl/SkCreatePlatformGLContext*.cpp     # For internal testing only.
    ../src/gpu/gl/command_buffer/*
    ../src/gpu/gl/egl/*
    ../src/gpu/gl/iOS/*
    ../src/gpu/gl/mesa/*
    ../src/opts/SkBitmapProcState_opts_none.cpp
    ../src/opts/SkBlitMask_opts_none.cpp
    ../src/opts/SkBlitRow_opts_none.cpp
    ../src/ports/SkFontMgr_empty_factory.cpp
    ../src/ports/SkGlobalInitialization_chromium.cpp
    ../src/ports/SkImageDecoder_empty.cpp
    ../src/ports/SkImageGenerator_none.cpp
    ../src/ports/SkTLS_none.cpp)

remove_srcs(../src/codec/*)  # TODO: Requires Chromium's libjpeg-turbo, and incompatible giflib.

# Certain files must be compiled with support for SSSE3 or SSE4.1 intrinsics.
file (GLOB_RECURSE ssse3_srcs ../src/*ssse3*.cpp ../src/*SSSE3*.cpp)
file (GLOB_RECURSE sse41_srcs ../src/*sse4*.cpp ../src/*SSE4*.cpp)
set_source_files_properties(${ssse3_srcs} PROPERTIES COMPILE_FLAGS -mssse3)
set_source_files_properties(${sse41_srcs} PROPERTIES COMPILE_FLAGS -msse4.1)

# Detect our optional dependencies.
# If we can't find them, don't build the parts of Skia that use them.
find_package (Lua)
find_package (ZLIB)
# No find_package for libwebp as far as I can tell, so simulate it here.
find_path (WEBP_INCLUDE_DIRS "webp/decode.h")
find_library (WEBP_LIBRARIES webp)

if (UNIX AND NOT APPLE)
    find_package (Freetype)
    # Same deal for fontconfig.
    find_path (FONTCONFIG_INCLUDE_DIRS "fontconfig/fontconfig.h")
    find_library (FONTCONFIG_LIBRARIES fontconfig)
    find_package (GIF)
    find_package (JPEG)
    find_package (PNG)
endif()

# TODO: macro away this if (found) ... else() ... endif() stuff.

if (GIF_FOUND)
    list (APPEND private_includes ${GIF_INCLUDE_DIRS})
    list (APPEND libs             ${GIF_LIBRARIES})
else()
    remove_srcs(../src/images/*gif*)
endif()

if (JPEG_FOUND)
    list (APPEND private_includes ${JPEG_INCLUDE_DIRS})
    list (APPEND libs             ${JPEG_LIBRARIES})
else()
    remove_srcs(../src/images/*jpeg*)
endif()

if (LUA_FOUND)
    list (APPEND private_includes ${LUA_INCLUDE_DIR})
    list (APPEND libs             ${LUA_LIBRARIES})
else()
    remove_srcs(../src/utils/*Lua*)
endif()

if (PNG_FOUND)
    list (APPEND private_includes ${PNG_INCLUDE_DIRS})
    list (APPEND libs             ${PNG_LIBRARIES})
else()
    remove_srcs(../src/images/*png*)
endif()

if (ZLIB_FOUND)
    list (APPEND private_includes ${ZLIB_INCLUDE_DIRS})
    list (APPEND libs             ${ZLIB_LIBRARIES})
    remove_srcs(../src/doc/SkDocument_PDF_None.cpp)
else()
    remove_srcs(../src/pdf/*.cpp ../src/doc/SkDocument_PDF.cpp)
endif()

if (WEBP_INCLUDE_DIRS AND WEBP_LIBRARIES)
    list (APPEND private_includes ${WEBP_INCLUDE_DIRS})
    list (APPEND libs             ${WEBP_LIBRARIES})
else()
    remove_srcs(../src/images/*webp*)
endif()

if (FREETYPE_FOUND)
    list (APPEND private_includes ${FREETYPE_INCLUDE_DIRS})
    list (APPEND libs             ${FREETYPE_LIBRARIES})
endif()

if (FONTCONFIG_INCLUDE_DIRS AND FONTCONFIG_LIBRARIES)
    list (APPEND private_includes ${FONTCONFIG_INCLUDE_DIRS})
    list (APPEND libs             ${FONTCONFIG_LIBRARIES})
endif()

if (APPLE)
    find_library(APPLICATION_SERVICES_FRAMEWORK ApplicationServices REQUIRED)
    list (APPEND libs ${APPLICATION_SERVICES_FRAMEWORK})
endif()

if (WIN32)
    list (APPEND private_includes ../third_party/externals/angle2/include
                                  ../third_party/externals/angle2/src
                                  ../third_party/externals/angle2/src/third_party/khronos
                                  ../third_party/externals/freetype
                                  ../third_party/externals/giflib
                                  ../third_party/externals/libpng
                                  ../third_party/externals/libjpeg-turbo
                                  ../third_party/externals/libwebp
                                  ../third_party/externals/libwebp/src
                                  ../third_party/externals/zlib
                                  ../third_party/etc1
                                  ../third_party/giflib
                                  ../third_party/ktx
                                  ../third_party/libpng
                                  ../third_party/libwebp)
    list (APPEND srcs ../third_party/externals/angle2/src/libEGL/libEGL.cpp)
    list (APPEND srcs ../src/core/SkDebug.cpp 
                      ../src/utils/SkDumpCanvas.cpp
                      ../src/ports/SkDebug_win.cpp)
    file (GLOB_RECURSE srcs_angle ../third_party/externals/angle2/src/*.cpp)    
    file (GLOB_RECURSE srcs_effects ../src/effects/*.cpp)
    file (GLOB_RECURSE srcs_codec ../src/codec/*.cpp)
    file (GLOB_RECURSE srcs_giflib ../third_party/externals/giflib/*.c)
    file (GLOB srcs_zlib ../third_party/externals/zlib/*.c)
    # file (GLOB_RECURSE srcs_libpng ../third_party/externals/libpng/png.c)
    set (srcs_libpng ../third_party/externals/libpng/png.c
                     ../third_party/externals/libpng/pngerror.c
                     ../third_party/externals/libpng/pngget.c
                     ../third_party/externals/libpng/pngmem.c
                     ../third_party/externals/libpng/pngpread.c
                     ../third_party/externals/libpng/pngread.c
                     ../third_party/externals/libpng/pngrio.c
                     ../third_party/externals/libpng/pngrtran.c
                     ../third_party/externals/libpng/pngrutil.c
                     ../third_party/externals/libpng/pngset.c
                     ../third_party/externals/libpng/pngtrans.c
                     ../third_party/externals/libpng/pngwio.c
                     ../third_party/externals/libpng/pngwrite.c
                     ../third_party/externals/libpng/pngwtran.c
                     ../third_party/externals/libpng/pngwutil.c)
    set (srcs_libjpegturbo  ../third_party/externals/libjpeg-turbo/jcapimin.c 
                            ../third_party/externals/libjpeg-turbo/jcapistd.c 
                            ../third_party/externals/libjpeg-turbo/jccoefct.c 
                            ../third_party/externals/libjpeg-turbo/jccolor.c 
                            ../third_party/externals/libjpeg-turbo/jcdctmgr.c 
                            ../third_party/externals/libjpeg-turbo/jchuff.c 
                            ../third_party/externals/libjpeg-turbo/jchuff.h 
                            ../third_party/externals/libjpeg-turbo/jcinit.c 
                            ../third_party/externals/libjpeg-turbo/jcmainct.c 
                            ../third_party/externals/libjpeg-turbo/jcmarker.c 
                            ../third_party/externals/libjpeg-turbo/jcmaster.c 
                            ../third_party/externals/libjpeg-turbo/jcomapi.c 
                            ../third_party/externals/libjpeg-turbo/jconfig.h 
                            ../third_party/externals/libjpeg-turbo/jcparam.c 
                            ../third_party/externals/libjpeg-turbo/jcphuff.c 
                            ../third_party/externals/libjpeg-turbo/jcprepct.c 
                            ../third_party/externals/libjpeg-turbo/jcsample.c 
                            ../third_party/externals/libjpeg-turbo/jdapimin.c 
                            ../third_party/externals/libjpeg-turbo/jdapistd.c 
                            ../third_party/externals/libjpeg-turbo/jdcoefct.c 
                            ../third_party/externals/libjpeg-turbo/jdcolor.c 
                            ../third_party/externals/libjpeg-turbo/jdct.h 
                            ../third_party/externals/libjpeg-turbo/jddctmgr.c 
                            ../third_party/externals/libjpeg-turbo/jdhuff.c 
                            ../third_party/externals/libjpeg-turbo/jdhuff.h 
                            ../third_party/externals/libjpeg-turbo/jdinput.c 
                            ../third_party/externals/libjpeg-turbo/jdmainct.c 
                            ../third_party/externals/libjpeg-turbo/jdmarker.c 
                            ../third_party/externals/libjpeg-turbo/jdmaster.c 
                            ../third_party/externals/libjpeg-turbo/jdmerge.c 
                            ../third_party/externals/libjpeg-turbo/jdphuff.c 
                            ../third_party/externals/libjpeg-turbo/jdpostct.c 
                            ../third_party/externals/libjpeg-turbo/jdsample.c 
                            ../third_party/externals/libjpeg-turbo/jerror.c 
                            ../third_party/externals/libjpeg-turbo/jerror.h 
                            ../third_party/externals/libjpeg-turbo/jfdctflt.c 
                            ../third_party/externals/libjpeg-turbo/jfdctfst.c 
                            ../third_party/externals/libjpeg-turbo/jfdctint.c 
                            ../third_party/externals/libjpeg-turbo/jidctflt.c 
                            ../third_party/externals/libjpeg-turbo/jidctfst.c 
                            ../third_party/externals/libjpeg-turbo/jidctint.c 
                            ../third_party/externals/libjpeg-turbo/jidctred.c 
                            ../third_party/externals/libjpeg-turbo/jinclude.h 
                            ../third_party/externals/libjpeg-turbo/jmemmgr.c 
                            ../third_party/externals/libjpeg-turbo/jmemnobs.c 
                            ../third_party/externals/libjpeg-turbo/jmemsys.h 
                            ../third_party/externals/libjpeg-turbo/jmorecfg.h 
                            ../third_party/externals/libjpeg-turbo/jpegint.h 
                            ../third_party/externals/libjpeg-turbo/jpeglib.h 
                            ../third_party/externals/libjpeg-turbo/jpeglibmangler.h 
                            ../third_party/externals/libjpeg-turbo/jquant1.c 
                            ../third_party/externals/libjpeg-turbo/jquant2.c 
                            ../third_party/externals/libjpeg-turbo/jutils.c 
                            ../third_party/externals/libjpeg-turbo/jversion.h
                            ../third_party/externals/libjpeg-turbo/simd/jsimd_x86_64.c)

    if(NOT DEFINED NASM)
        set(NASM ${CMAKE_SOURCE_DIR}/../third_party/externals/yasm/binaries/win/yasm.exe CACHE PATH "Path to NASM/YASM executable")
    endif()

    set(NAFLAGS -fwin64 -DWIN64 -D__x86_64__ -DRGBX_FILLER_0XFF -DSTRICT_MEMORY_ACCESS -DMSVC)
    set(NAFLAGS ${NAFLAGS} -I${CMAKE_SOURCE_DIR}/../third_party/externals/libjpeg-turbo/win/ 
                           -I${CMAKE_SOURCE_DIR}/../third_party/externals/libjpeg-turbo/simd/)
    # set(NAFLAGS ${NAFLAGS} -g) # Debug flags
    # if(SIMD_X86_64) # Default compile for x64
        set(SIMD_BASENAMES jccolss2-64 jcgrass2-64 jcqnts2f-64 jcqnts2i-64 jcsamss2-64 jdcolss2-64 jdmerss2-64 jdsamss2-64 
                           jfss2fst-64 jfss2int-64 jfsseflt-64 jiss2flt-64 jiss2fst-64 jiss2int-64 jiss2red-64)
            message(STATUS "Building x86_64 SIMD extensions")
    # endif()

    if(MSVC_IDE)
        set(OBJDIR "${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}")
    endif()

    file(GLOB_RECURSE INC_FILES ${CMAKE_SOURCE_DIR}/../third_party/externals/libjpeg-turbo/*.inc)

    set(SIMD_OBJ_COMPILED "")
    foreach(file ${SIMD_BASENAMES})
      set(DEPFILE "")
      set(SIMD_SRC ${CMAKE_SOURCE_DIR}/../third_party/externals/libjpeg-turbo/simd/${file}.asm)
      if(${file} MATCHES jccolor)
        set(DEPFILE ${file})
        string(REGEX REPLACE "jccolor" "jccolext" DEPFILE ${DEPFILE})
        set(DEPFILE ${CMAKE_CURRENT_SOURCE_DIR}/${DEPFILE}.asm)
      endif()
      if(${file} MATCHES jcgray)
        set(DEPFILE ${file})
        string(REGEX REPLACE "jcgray" "jcgryext" DEPFILE ${DEPFILE})
        set(DEPFILE ${CMAKE_SOURCE_DIR}/../third_party/externals/libjpeg-turbo/simd/${DEPFILE}.asm)
      endif()
      if(${file} MATCHES jdcolor)
        set(DEPFILE ${file})
        string(REGEX REPLACE "jdcolor" "jdcolext" DEPFILE ${DEPFILE})
        set(DEPFILE ${CMAKE_SOURCE_DIR}/../third_party/externals/libjpeg-turbo/simd/${DEPFILE}.asm)
      endif()
      if(${file} MATCHES jdmerge)
        set(DEPFILE ${file})
        string(REGEX REPLACE "jdmerge" "jdmrgext" DEPFILE ${DEPFILE})
        set(DEPFILE ${CMAKE_SOURCE_DIR}/../third_party/externals/libjpeg-turbo/simd/${DEPFILE}.asm)
      endif()
      set(SIMD_OBJ ${OBJDIR}/${file}.obj)
      set(SIMD_OBJ_COMPILED ${SIMD_OBJ_COMPILED} ${SIMD_OBJ})
      add_custom_command(OUTPUT ${SIMD_OBJ}
        DEPENDS ${SIMD_SRC} ${DEPFILE} ${INC_FILES}
        COMMAND ${NASM} ${NAFLAGS} ${SIMD_SRC} -o${SIMD_OBJ})
      set(SIMD_OBJS ${SIMD_OBJS} ${SIMD_OBJ})
    endforeach()

    add_custom_target(simd DEPENDS ${SIMD_OBJS})
    list (APPEND srcs ${SIMD_OBJ_COMPILED})

    file (GLOB_RECURSE srcs_libwebp ../third_party/externals/libwebp/src/*.c)
    file (GLOB_RECURSE srcs_ktx ../third_party/ktx/*.cpp)
    list (APPEND srcs ${srcs_angle} ${srcs_effects} ${srcs_codec} ${srcs_giflib} 
                      ${srcs_libpng} ${srcs_libjpegturbo} ${srcs_ktx} ${srcs_libwebp} ${srcs_zlib})
    remove_srcs(../third_party/externals/angle2/src/*unittest*)
    remove_srcs(../third_party/externals/angle2/src/tests/*)
    remove_srcs(../third_party/externals/angle2/src/libANGLE/renderer/gl/glx/*)
    remove_srcs(../third_party/externals/angle2/src/libANGLE/renderer/d3d/d3d11/winrt/*)
    remove_srcs(../third_party/externals/angle2/src/libANGLE/renderer/d3d/d3d9/*)
    remove_srcs(../third_party/externals/zlib/simd_stub.c)
    list (APPEND libs FontSub.lib dxguid.lib Usp10.lib)
endif()

find_package(OpenGL REQUIRED)
list (APPEND libs  ${OPENGL_LIBRARIES})

# This is our main output, libskia.so.
# We mostly build an .so here because it helps test we've linked everything,
# not so much that we think Skia is a good candidate to ship as a shared library.
add_library (skia SHARED ${srcs})

set(PLATFORM_DEFINES -DSKIA_DLL)
if (WIN32)
  set(PLATFORM_DEFINES ${PLATFORM_DEFINES} -DSK_ANGLE -DLIBANGLE_IMPLEMENTATION -DANGLE_ENABLE_D3D11 -DSKIA_PNG_PREFIXED)
endif()

target_compile_definitions(skia
    PUBLIC
    PRIVATE ${PLATFORM_DEFINES})

target_include_directories(skia
    PUBLIC  ${public_includes}
    PRIVATE ${private_includes})

target_link_libraries(skia
    PUBLIC
    PRIVATE ${libs})


set_target_properties(skia PROPERTIES
    COMPILE_FLAGS "-fno-exceptions -fno-rtti"
    CXX_VISIBILITY_PRESET hidden
    VISIBILITY_INLINES_HIDDEN true)

# Experimental C API install:
file(GLOB cheaders "../include/c/*.h")
install(FILES ${cheaders} DESTINATION include)
install(TARGETS skia DESTINATION lib)

# Now build a simple example app that uses Skia via libskia.so.
link_directories(${CMAKE_BINARY_DIR})
add_executable(example example.cpp)
target_link_libraries(example skia ${OPENGL_LIBRARIES})
target_include_directories(example PUBLIC ${public_includes})